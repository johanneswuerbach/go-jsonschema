// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "errors"
import "fmt"

type A10212AnyOfConfigurationsElem_0 struct {
	// Foo corresponds to the JSON schema field "foo".
	Foo string `json:"foo" yaml:"foo" mapstructure:"foo"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A10212AnyOfConfigurationsElem_0) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["foo"]; !ok || v == nil {
		return fmt.Errorf("field foo in A10212AnyOfConfigurationsElem_0: required")
	}
	type Plain A10212AnyOfConfigurationsElem_0
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = A10212AnyOfConfigurationsElem_0(plain)
	return nil
}

type A10212AnyOfConfigurationsElem_1 struct {
	// Bar corresponds to the JSON schema field "bar".
	Bar float64 `json:"bar" yaml:"bar" mapstructure:"bar"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A10212AnyOfConfigurationsElem_1) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["bar"]; !ok || v == nil {
		return fmt.Errorf("field bar in A10212AnyOfConfigurationsElem_1: required")
	}
	type Plain A10212AnyOfConfigurationsElem_1
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = A10212AnyOfConfigurationsElem_1(plain)
	return nil
}

type A10212AnyOfConfigurationsElem_2 struct {
	// Baz corresponds to the JSON schema field "baz".
	Baz *bool `json:"baz,omitempty" yaml:"baz,omitempty" mapstructure:"baz,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A10212AnyOfConfigurationsElem_2) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain A10212AnyOfConfigurationsElem_2
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = A10212AnyOfConfigurationsElem_2(plain)
	return nil
}

type A10212AnyOfConfigurationsElem struct {
	// Bar corresponds to the JSON schema field "bar".
	Bar float64 `json:"bar" yaml:"bar" mapstructure:"bar"`

	// Baz corresponds to the JSON schema field "baz".
	Baz *bool `json:"baz,omitempty" yaml:"baz,omitempty" mapstructure:"baz,omitempty"`

	// Foo corresponds to the JSON schema field "foo".
	Foo string `json:"foo" yaml:"foo" mapstructure:"foo"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A10212AnyOfConfigurationsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	var a10212AnyOfConfigurationsElem_0 A10212AnyOfConfigurationsElem_0
	var a10212AnyOfConfigurationsElem_1 A10212AnyOfConfigurationsElem_1
	var a10212AnyOfConfigurationsElem_2 A10212AnyOfConfigurationsElem_2
	var errs []error
	if err := a10212AnyOfConfigurationsElem_0.UnmarshalJSON(b); err != nil {
		errs = append(errs, err)
	}
	if err := a10212AnyOfConfigurationsElem_1.UnmarshalJSON(b); err != nil {
		errs = append(errs, err)
	}
	if err := a10212AnyOfConfigurationsElem_2.UnmarshalJSON(b); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 3 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain A10212AnyOfConfigurationsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = A10212AnyOfConfigurationsElem(plain)
	return nil
}

type A10212AnyOf struct {
	// Configurations corresponds to the JSON schema field "configurations".
	Configurations []A10212AnyOfConfigurationsElem `json:"configurations,omitempty" yaml:"configurations,omitempty" mapstructure:"configurations,omitempty"`

	// Flags corresponds to the JSON schema field "flags".
	Flags interface{} `json:"flags,omitempty" yaml:"flags,omitempty" mapstructure:"flags,omitempty"`
}
